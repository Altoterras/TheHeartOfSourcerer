apply plugin: 'com.android.model.application'
model {
    android {
        compileSdkVersion = 20
        buildToolsVersion = '23.0.3'
        defaultConfig {
            applicationId = 'jp.co.altoterras.sourcerer01'
            minSdkVersion.apiLevel = 5
            targetSdkVersion.apiLevel = 23
        }
        buildTypes {
            release {
                minifyEnabled = false
                proguardFiles.add(file('proguard-rules.txt'))
            }
        }

	    /*
	      * native build settings
	      */
	    sources {
	        main {
	            jni {
	                source {
						srcDirs += "../../../../src/"
						exclude "atar/"
						exclude "basicmodel/"
						exclude "dimz/"
						exclude "edev/"
						exclude "ios/"
						exclude "windows/"
	                }
					exportedHeaders {
						srcDirs += "../../../../src/common/library/include"
						srcDirs += "../../../../src/android/library/include"
						srcDirs += "../../../../src/android/library/src/OpenAL/OpenAL32/Include"
					}
//					dependencies {
//						library "src/main/jni/libandroid_native_app_glue.a" linkage "static"
//					}
	            }
	        }
	    }
	    ndk {
	        moduleName = 'sourcerer01'
//			toolchain = 'clang'
			CFlags.addAll(['-ffast-math', '-DAL_ALEXT_PROTOTYPES'])
			cppFlags.addAll(['-fsigned-char', '-D_ANDROID', '-D_ENLIGHT_V01', '-D_DEBUG'])
//			ldFlags.add("-Lsrc/main/jni/libandroid_native_app_glue.a")
//			ldFlags.addAll("-Lsrc/main/jni/")
//			ldLibs.add("libandroid_native_app_glue")
			ldLibs.addAll(['log', 'android', 'EGL', 'GLESv1_CM', 'OpenSLES' ])
		}
		/*
		productFlavors {
			// for detailed abiFilter descriptions, refer to "Supported ABIs" @
			// https://developer.android.com/ndk/guides/abis.html#sa
			create("arm") {
			    ndk.abiFilters.add("armeabi")
			}
			create("arm7") {
			    ndk.abiFilters.add("armeabi-v7a")
			}
			create("arm8") {
			    ndk.abiFilters.add("arm64-v8a")
			}
			create("x86") {
			    ndk.abiFilters.add("x86")
			}
			create("x86-64") {
			    ndk.abiFilters.add("x86_64")
			}
			create("mips") {
			    ndk.abiFilters.add("mips")
			}
			create("mips-64") {
			    ndk.abiFilters.add("mips64")
			}
			// To include all cpu architectures, leaves abiFilters empty
			create("all")
		}
		*/
	}
}

dependencies {
	compile project(':googlePlayDownloaderLibrary')
	compile project(':googlePlayLicenseLibrary')
	compile project(':zipFileLibrary')
}
