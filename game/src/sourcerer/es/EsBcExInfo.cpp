/***********************************************************************//**
 *	EsBcExInfo.cpp
 *	Enlight Script
 *
 *	Created by Ryoutarou Kishi on 2010/02/25.
 *	Copyright 2009 Altoterras Corporation. All rights reserved.
 *
**//***********************************************************************/

////////////////////////////////////////////////////////////////////////////
// インクルードファイル

// Base

// Self
#include "EsBcExInfo.h"

// Friends
#include "EsProgramCounter.h"

// External

ES_BEGIN_NS

////////////////////////////////////////////////////////////////////////////
// クラス

//==========================================================================
// EsBcExInfo::EsBcExInfo メソッド

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// 外部サービス

/*---------------------------------------------------------------------*//**
	コンストラクタ
**//*---------------------------------------------------------------------*/
EsBcExInfo::EsBcExInfo()
	: _idxBegin(0)
	, _idxEnd(0)
{
}

/*---------------------------------------------------------------------*//**
	コンストラクタ
**//*---------------------------------------------------------------------*/
EsBcExInfo::EsBcExInfo(u32 idxBegin, u32 idxEnd)
	: _idxBegin(idxBegin)
	, _idxEnd(idxEnd)
{
	verifyRange();
}


/*---------------------------------------------------------------------*//**
	コンストラクタ
**//*---------------------------------------------------------------------*/
EsBcExInfo::EsBcExInfo(EsProgramCounter* pc)
{
	fromBytecode(pc);
}

/*---------------------------------------------------------------------*//**
	コピーコンストラクタ
**//*---------------------------------------------------------------------*/
EsBcExInfo::EsBcExInfo(const EsBcExInfo& src)
{
	copy(&src);
}

/*---------------------------------------------------------------------*//**
	クリア
**//*---------------------------------------------------------------------*/
void EsBcExInfo::clear()
{
	_idxBegin = 0;
	_idxEnd = 0;
}

/*---------------------------------------------------------------------*//**
	コピー
**//*---------------------------------------------------------------------*/
void EsBcExInfo::copy(const EsBcExInfo* src)
{
	_idxBegin = src->_idxBegin;
	_idxEnd = src->_idxEnd;

	verifyRange();
}

/*---------------------------------------------------------------------*//**
	バイトコードを生成
**//*---------------------------------------------------------------------*/
void EsBcExInfo::toBytecode(u8 bc[8])
{
	verifyRange();

	// バイトコード化
	bc[0] = VERIFY_KEY;	// 予約
	bc[1] = 0;			// 予約
	bc[2] = TFW_U32_TO_U8_B2(_idxBegin);
	bc[3] = TFW_U32_TO_U8_B3(_idxBegin);
	bc[4] = TFW_U32_TO_U8_B4(_idxBegin);
	bc[5] = TFW_U32_TO_U8_B2(_idxEnd);
	bc[6] = TFW_U32_TO_U8_B3(_idxEnd);
	bc[7] = TFW_U32_TO_U8_B4(_idxEnd);
}

/*---------------------------------------------------------------------*//**
	プログラムカウンターから作成
**//*---------------------------------------------------------------------*/
void EsBcExInfo::fromBytecode(EsProgramCounter* pc)
{
	u8 bc[LEN_BC];
	for(int i = 0; i < LEN_BC; i++)	{	bc[i] = pc->get(i);	}
	fromBytecode(bc);
}

/*---------------------------------------------------------------------*//**
	バイトコードから作成
**//*---------------------------------------------------------------------*/
void EsBcExInfo::fromBytecode(const u8 bc[8])
{
	ASSERT(bc[0] == VERIFY_KEY);

	// バイトコードを読み取る
	_idxBegin = (bc[2] << 16) | (bc[3] << 8) | bc[4];
	_idxEnd = (bc[5] << 16) | (bc[6] << 8) | bc[7];

	verifyRange();
}

/*---------------------------------------------------------------------*//**
	範囲確認
**//*---------------------------------------------------------------------*/
void EsBcExInfo::verifyRange()
{
	// 0x00ffffff 以内である必要がある
	ASSERT(_idxBegin <= 0x00ffffff);
	ASSERT(_idxEnd <= 0x00ffffff);
}

////////////////////////////////////////////////////////////////////////////

ES_END_NS
