/***********************************************************************//**
 *	SpiritManager.cpp
 *	Enlight Game Application
 *
 *	Created by Ryoutarou Kishi on 2009/12/13.
 *	Copyright 2009 Altoterras Corporation. All rights reserved.
 *
**//***********************************************************************/

////////////////////////////////////////////////////////////////////////////
// インクルードファイル

// Base

// Self
#include "SpiritManager.h"

// Friends
#include "Spirit.h"

// External
#include "../../tfw/collection/Array.h"

// Library

////////////////////////////////////////////////////////////////////////////

SRCR_BEGIN_NS

////////////////////////////////////////////////////////////////////////////
// 定数

////////////////////////////////////////////////////////////////////////////
// クラス

//==========================================================================
// SpiritManager メソッド

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// アクセサ

/*---------------------------------------------------------------------*//**
	スピリット数を得る
**//*---------------------------------------------------------------------*/
s32 SpiritManager::getSpiritNum() const
{
	return _arrSpirit->getCount();
}

/*---------------------------------------------------------------------*//**
	スピリットを得る
**//*---------------------------------------------------------------------*/
Spirit* SpiritManager::getSpirit(u16 spiritid) const
{
	u32 index = spiritid - 1;
	ASSERT(index < _arrSpirit->getCount());
	return _arrSpirit->getAt(index);
}

/*---------------------------------------------------------------------*//**
	スピリットをインデックスから得る
**//*---------------------------------------------------------------------*/
Spirit* SpiritManager::getSpiritFromIndex(s32 index) const
{
	ASSERT((0 <= index) && ((u32)index < _arrSpirit->getCount()));
	return _arrSpirit->getAt(index);
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// 外部サービス

/*---------------------------------------------------------------------*//**
	スピリットの追加
	
	@return	スピリット ID
**//*---------------------------------------------------------------------*/
u16 SpiritManager::addSpirit(Spirit* spiritEntr)
{
	int index = _arrSpirit->getCount();
	if(_arrSpirit->add(spiritEntr))
	{
		return (u16)(index + 1);
	}
	return 0;
}

/*---------------------------------------------------------------------*//**
	スピリットの削除
**//*---------------------------------------------------------------------*/
void SpiritManager::removeSpirit(const Spirit* spirit)
{
	for(u32 i = 0; i < _arrSpirit->getCount(); i++)
	{
		Spirit* spiritWk = _arrSpirit->getAt(i);
		if(spiritWk == spirit)
		{
			spiritWk->destroy();
			_arrSpirit->remove(i);
			return;
		}
	}
}

/*---------------------------------------------------------------------*//**
	全てのスピリットの削除
**//*---------------------------------------------------------------------*/
void SpiritManager::removeAllSpirit()
{
	for(u32 i = 0; i < _arrSpirit->getCount(); i++)
	{
		Spirit* spiritWk = _arrSpirit->getAt(i);
		spiritWk->destroy();
	}
	_arrSpirit->removeAll(false);
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// 内部制御

/*---------------------------------------------------------------------*//**
	コンストラクタ
**//*---------------------------------------------------------------------*/
SpiritManager::SpiritManager()
	: _arrSpirit(0L)
{
}

/*---------------------------------------------------------------------*//**
	デストラクタ
**//*---------------------------------------------------------------------*/
SpiritManager::~SpiritManager()
{
	delete _arrSpirit;
}

/*---------------------------------------------------------------------*//**
	作成
**//*---------------------------------------------------------------------*/
bool SpiritManager::create()
{
	_arrSpirit = new Array<Spirit*>(true, true);

	return true;
}

/*---------------------------------------------------------------------*//**
	破棄
**//*---------------------------------------------------------------------*/
void SpiritManager::destroy()
{
	if(_arrSpirit != 0L)
	{
		for(u32 i = 0; i < _arrSpirit->getCount(); i++)
		{
			_arrSpirit->getAt(i)->destroy();
		}
		delete _arrSpirit;
		_arrSpirit = 0L;
	}
}

/*---------------------------------------------------------------------*//**
	フレーム制御
**//*---------------------------------------------------------------------*/
void SpiritManager::exec(ExecRes* res, const ExecCtx* ec)
{
	for(u32 i = 0; i < _arrSpirit->getCount(); i++)
	{
		_arrSpirit->getAt(i)->exec(res, ec);
	}
}

/*---------------------------------------------------------------------*//**
	描画
**//*---------------------------------------------------------------------*/
void SpiritManager::render(const RenderCtx* rc)
{
	for(u32 i = 0; i < _arrSpirit->getCount(); i++)
	{
		_arrSpirit->getAt(i)->render(rc);
	}
}

/*---------------------------------------------------------------------*//**
	ゲームの終了通知（行動の強制停止）
**//*---------------------------------------------------------------------*/
void SpiritManager::notifyTerminateGame()
{
	for(u32 i = 0; i < _arrSpirit->getCount(); i++)
	{
		_arrSpirit->getAt(i)->notifyTerminateGame();
	}
}

////////////////////////////////////////////////////////////////////////////

SRCR_END_NS
