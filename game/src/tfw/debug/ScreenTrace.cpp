/***********************************************************************//**
 *	ScreenTrace.cpp
 *	Terras Framework
 *
 *	Created by Ryoutarou Kishi on 2010/01/15.
 *	Copyright 2009 Altoterras Corporation. All rights reserved.
 *
**//***********************************************************************/

////////////////////////////////////////////////////////////////////////////
// インクルードファイル

// Base

// Self
#include "ScreenTrace.h"

// Friends
#include "../gcmn/EasyStringDrawer.h"

// External

// Library
#include <stdarg.h>

////////////////////////////////////////////////////////////////////////////
// クラス

//==========================================================================
// メソッド

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// 外部サービス

/*---------------------------------------------------------------------*//**
	文字列追加
**//*---------------------------------------------------------------------*/
void tfw::ScreenTrace::trace(const CStringBase* str)
{
	_str[_dside].add(str);
}

/*---------------------------------------------------------------------*//**
	文字列追加
**//*---------------------------------------------------------------------*/
void tfw::ScreenTrace::trace(const char* str)
{
	_str[_dside].add(str);
}

/*---------------------------------------------------------------------*//**
	フォーマット文字列追加
**//*---------------------------------------------------------------------*/
void tfw::ScreenTrace::traceFormat(const char* str, ...)
{
	va_list args;
	va_start(args, str);

	int count;
	char szBuffer[1024];

	// 書式化の文字列作成
	#if defined(_WINDOWS)
		count = _vsnprintf_s(szBuffer, sizeof(szBuffer), str, args);
	#else
		count = vsnprintf(szBuffer, sizeof(szBuffer), str, args);
	#endif

	va_end(args);

	trace(szBuffer);
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// 内部制御

/*---------------------------------------------------------------------*//**
	コンストラクタ
**//*---------------------------------------------------------------------*/
tfw::ScreenTrace::ScreenTrace()
	: _dside(0)
	, _xBase(0)
	, _yBase(0)
	, _sizeFont(0)
	, _fontRef(0L)
{
}

/*---------------------------------------------------------------------*//**
	デストラクタ
**//*---------------------------------------------------------------------*/
tfw::ScreenTrace::~ScreenTrace()
{
}

/*---------------------------------------------------------------------*//**
	作成
**//*---------------------------------------------------------------------*/
bool tfw::ScreenTrace::create(Font* fontRef, s32 xBase, s32 yBase, s32 sizeFont)
{
	_fontRef = fontRef;
	_xBase = xBase;
	_yBase = yBase;
	_sizeFont = sizeFont;

	return true;
}

/*---------------------------------------------------------------------*//**
	破棄
**//*---------------------------------------------------------------------*/
void tfw::ScreenTrace::destroy()
{
	_fontRef = 0L;
}

/*---------------------------------------------------------------------*//**
	フレーム制御
	※ 他のモジュールの exec の後にコールすることを想定
**//*---------------------------------------------------------------------*/
void tfw::ScreenTrace::exec(ExecRes* res, const ExecCtx* ec)
{
	// バッファの変更
	_dside = (_dside + 1) & 1;

	// バッファのクリア
	_str[_dside].emptyEasy();
}

/*---------------------------------------------------------------------*//**
	2D 描画
	※ 他のモジュールの draw の後にコールすることを想定
**//*---------------------------------------------------------------------*/
void tfw::ScreenTrace::draw(const RenderCtx* rc)
{
	if(_fontRef != 0L)
	{
		EasyStringDrawer::draw(_fontRef, &_str[!_dside], (f32)_xBase, (f32)_yBase, _sizeFont, rc);
	}
}

////////////////////////////////////////////////////////////////////////////
