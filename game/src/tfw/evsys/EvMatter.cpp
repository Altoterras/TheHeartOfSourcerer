/***********************************************************************//**
 *	EvMatter.cpp
 *	Enlight Game Application
 *
 *	Created by Ryoutarou Kishi on 2009/09/29.
 *	Copyright 2009 Altoterras Corporation. All rights reserved.
 *
**//***********************************************************************/

////////////////////////////////////////////////////////////////////////////
// インクルードファイル

// Base

// Self
#include "EvMatter.h"

// Friends

// External
#include "../lib/Vector.h"
#include "../lib/XmlParser.h"
#include "../string/StringUtils.h"

TFW_BEGIN_NS

////////////////////////////////////////////////////////////////////////////
// クラス

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// アクセサ

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// 外部サービス

/*---------------------------------------------------------------------*//**
	フラグによる開始判定
**//*---------------------------------------------------------------------*/
bool EvMatter::judgeBeginFlags(u16 evid, u32 flagsCond) const
{
	if((evid == _evidThis) || (evid == 0))		// イベント ID が 0 指定の場合はイベント ID に関わらず起動する
	{
		return true;	// 開始 OK
	}

	return false;
}

/*---------------------------------------------------------------------*//**
	セーブデータによる開始判定
**//*---------------------------------------------------------------------*/
bool EvMatter::judgeBeginCustom() const
{
	return true;
}

/*---------------------------------------------------------------------*//**
	開始に関わるセーブデータの変更
**//*---------------------------------------------------------------------*/
void EvMatter::markBegin()
{
}

/*---------------------------------------------------------------------*//**
	別のマターで上書きする
**//*---------------------------------------------------------------------*/
bool EvMatter::overrideMatter(u16 evidOvrd)
{
	// 上書きするイベントを併発イベントとして設定する
	// 従って、既に併発イベントが設定されている場合は設定できない（試験的仕様）
	if(_evidConcurrent != 0)
	{
		ASSERT(false);	// エラーを出してみる
		return false;
	}
	_evidConcurrent = evidOvrd;

	// 上書きフラグを設定
	TFW_SET_FLAG(_ctrlflags, CTRLF_OVERRIDED, true);

	return true;
}

/*---------------------------------------------------------------------*//**
	マターの上書きを解除する
**//*---------------------------------------------------------------------*/
bool EvMatter::unoverrideMatter()
{
	// 上書き確認
	if(!TFW_IS_FLAG(_ctrlflags, CTRLF_OVERRIDED))
	{
		return false;	// 上書きされていない
	}

	// 元に戻す
	_evidConcurrent = 0;
	TFW_SET_FLAG(_ctrlflags, CTRLF_OVERRIDED, false);

	return true;
}

/*---------------------------------------------------------------------*//**
	マターの上書きが行われているかを得る
**//*---------------------------------------------------------------------*/
bool EvMatter::isOverrideMatter() const
{
	return TFW_IS_FLAG(_ctrlflags, CTRLF_OVERRIDED);
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// 内部制御

/*---------------------------------------------------------------------*//**
	コンストラクタ
**//*---------------------------------------------------------------------*/
EvMatter::EvMatter(u16 emtype)
	: _emtype(emtype)
	, _evidThis(0)
	, _evidNext(0)
	, _evidConcurrent(0)
	, _evidParent(0)
	, _paramPresv(0)
	, _paramBegin(0)
	, _fcntMatter(0.0f)
	, _fcntPauseLimit(0.0f)
	, _step(0)
	, _ctrlflags(0)
{
}

/*---------------------------------------------------------------------*//**
	デストラクタ
**//*---------------------------------------------------------------------*/
EvMatter::~EvMatter()
{
}

/*---------------------------------------------------------------------*//**
	作成
**//*---------------------------------------------------------------------*/
bool EvMatter::create(EvData* evdat, u16 evid)
{
	_evidThis = evid;
	_fcntPauseLimit = -1.0f;
	
	return true;
}

/*---------------------------------------------------------------------*//**
	XML 要素から作成
**//*---------------------------------------------------------------------*/
bool EvMatter::setupFromXmlNode(const XmlNode* node, const EvMatterCreateParam* cparam)
{
	return true;
}

/*---------------------------------------------------------------------*//**
	破棄
**//*---------------------------------------------------------------------*/
void EvMatter::destroy()
{
	// 強制終了
	if(isBegin())
	{
		end();
	}
}

/*---------------------------------------------------------------------*//**
	起動原因をセット

	@param	cause	起動原因指定子
**//*---------------------------------------------------------------------*/
void EvMatter::setCause(const EvCause* cause)
{
	_cause = *cause;
}

/*---------------------------------------------------------------------*//**
	オプション設定
**//*---------------------------------------------------------------------*/
void EvMatter::setOption(u16 evidNext, u16 evidConcurrent)
{
	_evidNext = evidNext;
	_evidConcurrent = evidConcurrent;
}

/*---------------------------------------------------------------------*//**
	発動
**//*---------------------------------------------------------------------*/
void EvMatter::begin(u32 paramBegin)
{
	// 上書きされたマターは起動できない
	if(TFW_IS_FLAG(_ctrlflags, CTRLF_OVERRIDED))
	{
		return;
	}

	// 値の初期化
	_paramBegin = paramBegin;
	_step = 1;
	_fcntMatter = 0.0f;
}

/*---------------------------------------------------------------------*//**
	終了
**//*---------------------------------------------------------------------*/
void EvMatter::end()
{
	// 値のクリア
	_step = -1;
}

/*---------------------------------------------------------------------*//**
	フレーム制御
**//*---------------------------------------------------------------------*/
void EvMatter::exec(ExecRes* res, const ExecCtx* ec)
{
	// フレームカウンタを進める
	_fcntMatter += ec->getDeltaFrame();

	// ポーズ時の限界フレームが設定されえているときは、そのフレームにクリップする
	if((_fcntPauseLimit >= 0.0f) && (_fcntMatter > _fcntPauseLimit))
	{
		_fcntMatter = _fcntPauseLimit;
	}

	execImplement(res, ec, _fcntMatter);
}

/*---------------------------------------------------------------------*//**
	フレーム処理実装
**//*---------------------------------------------------------------------*/
void EvMatter::execImplement(ExecRes* res, const ExecCtx* ec, f32 frameBegun)
{
	// デフォルトでは即終了する
	end();
}

////////////////////////////////////////////////////////////////////////////

TFW_END_NS
