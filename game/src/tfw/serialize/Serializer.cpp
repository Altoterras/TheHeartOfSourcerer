/***********************************************************************//**
 *  Serializer.cpp
 *  Terras Framework
 *
 *	Created by Ryoutarou Kishi on 2010/03/23.
 *	Copyright 2010 Altoterras Corporation. All rights reserved.
 *
**//***********************************************************************/

////////////////////////////////////////////////////////////////////////////
// インクルードファイル

// Base

// Self
#include "Serializer.h"

// Friends
#include "../lib/Vector.h"
#include "../string/VcString.h"

// External

// Library

////////////////////////////////////////////////////////////////////////////

TFW_BEGIN_NS

////////////////////////////////////////////////////////////////////////////
// クラス

//==========================================================================
// Serializer メソッド

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// アクセサ

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// 外部サービス

/*---------------------------------------------------------------------*//**
	文字列の保存
**//*---------------------------------------------------------------------*/
bool Serializer::store(const VcString* val)
{
	// 文字列長の保存
	s32 len = val->getLength();
	if(!store(&len)) { return false; }

	// 文字列の保存
	s32 lenAligned = (len + 7) & ~7;
	for(s32 i = 0; i < lenAligned; i++)
	{
		s8 c = 0;
		if(i < len)
		{
			c = val->getAt(i);
		}

		if(!store(&c)) { return false; }
	}

	return true;
}

/*---------------------------------------------------------------------*//**
	３要素浮動小数点ベクトルの保存
**//*---------------------------------------------------------------------*/
bool Serializer::store(const Vector3F* val)
{
	if(!store(&val->_v[0])) { return false; }
	if(!store(&val->_v[1])) { return false; }
	if(!store(&val->_v[2])) { return false; }
	return true;
}

/*---------------------------------------------------------------------*//**
	文字列の読込
**//*---------------------------------------------------------------------*/
bool Serializer::restore(VcString* val)
{
	// 文字列長の読込
	s32 len = 0;
	if(!restore(&len)) { return false; }

	// 文字列の読込
	val->empty();
	s32 lenAligned = (len + 7) & ~7;
	for(s32 i = 0; i < lenAligned; i++)
	{
		s8 c = 0;
		if(!restore(&c)) { return false; }

		if(i < len)
		{
			val->add(c);
		}
	}

	return true;
}

/*---------------------------------------------------------------------*//**
	３要素浮動小数点ベクトルの読込
**//*---------------------------------------------------------------------*/
bool Serializer::restore(Vector3F* val)
{
	if(!restore(&val->_v[0])) { return false; }
	if(!restore(&val->_v[1])) { return false; }
	if(!restore(&val->_v[2])) { return false; }
	return true;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// 内部制御

/*---------------------------------------------------------------------*//**
	コンストラクタ
**//*---------------------------------------------------------------------*/
Serializer::Serializer()
	: _struct(0L)
	, _gflags(0)
	, _gparam(0L)
{
}

/*---------------------------------------------------------------------*//**
	デストラクタ
**//*---------------------------------------------------------------------*/
Serializer::~Serializer()
{
}

////////////////////////////////////////////////////////////////////////////

TFW_END_NS