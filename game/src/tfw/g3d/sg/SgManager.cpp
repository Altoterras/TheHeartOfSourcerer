/***********************************************************************//**
 *  SgManager.cpp
 *  Terras Framework
 *
 *  Created by Ryoutarou Kishi on 2009/04/18.
 *  Copyright 2009 Altoterras Corporation. All rights reserved.
**//***********************************************************************/

////////////////////////////////////////////////////////////////////////////
// インクルードファイル

// Base

// Self
#include "SgManager.h"

// Friends
#include "node/SgNodeChain.h"

// External

// Library

////////////////////////////////////////////////////////////////////////////

TFW_BEGIN_NS

////////////////////////////////////////////////////////////////////////////
// クラス

//==========================================================================
// SgManager メソッド

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// 外部サービス

/*---------------------------------------------------------------------*//**
	ID からノードを取得
**//*---------------------------------------------------------------------*/
SgNode* SgManager::getNodeFromId(u16 sgnodeid) const
{
	if(_nodeRoot == 0L)	{	return 0L;	}
	return _nodeRoot->getChildNodeFromId(sgnodeid);
}

/*---------------------------------------------------------------------*//**
	子ノードを追加
**//*---------------------------------------------------------------------*/
bool SgManager::addChildNode(SgNodeChain* sgncParent, SgNode* sgnode)
{
	return sgncParent->addChildNode(sgnode);
}

/*---------------------------------------------------------------------*//**
	子ノードを削除
**//*---------------------------------------------------------------------*/
bool SgManager::removeChildNode(SgNodeChain* sgncParent, SgNode* sgnode)
{
	return sgncParent->removeChildNode(sgnode);
}

/*---------------------------------------------------------------------*//**
	子ノードを削除
**//*---------------------------------------------------------------------*/
bool SgManager::removeChildNode(SgNodeChain* sgncParent, u16 sgnodeid)
{
	return sgncParent->removeChildNode(sgnodeid);
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// 内部制御

/*---------------------------------------------------------------------*//**
	コンストラクタ
**//*---------------------------------------------------------------------*/
SgManager::SgManager() :
	_nodeRoot(0L),
	_tfwOwnerRef(0L)
{
}

/*---------------------------------------------------------------------*//**
	デストラクタ
**//*---------------------------------------------------------------------*/
SgManager::~SgManager()
{
}

/*---------------------------------------------------------------------*//**
	作成
**//*---------------------------------------------------------------------*/
bool SgManager::create(Tfw* tfwOwnerRef)
{
	_nodeRoot = new SgNodeChain();
	if(!_nodeRoot->create())	{	return false;	}

	_tfwOwnerRef = tfwOwnerRef;

	return true;
}

/*---------------------------------------------------------------------*//**
	破棄
**//*---------------------------------------------------------------------*/
void SgManager::destroy()
{
	if(_nodeRoot != 0L)
	{
		_nodeRoot->destroy();
		delete _nodeRoot;
		_nodeRoot = 0L;
	}

	_tfwOwnerRef = 0L;
}

/*---------------------------------------------------------------------*//**
	リセット
**//*---------------------------------------------------------------------*/
bool SgManager::reset()
{
	Tfw* tfwOwnerRefBk = _tfwOwnerRef;
	destroy();
	return create(tfwOwnerRefBk);
}

/*---------------------------------------------------------------------*//**
	フレーム制御
**//*---------------------------------------------------------------------*/
void SgManager::exec(ExecRes* res, const ExecCtx* ec)
{
	if(_nodeRoot != 0L)
	{
		_nodeRoot->exec(res, ec);
	}
}

/*---------------------------------------------------------------------*//**
	描画前処理
**//*---------------------------------------------------------------------*/
void SgManager::previse(const RenderCtx* rc)
{
	if(_nodeRoot != 0L)
	{
		_nodeRoot->previse(rc);
	}
}

/*---------------------------------------------------------------------*//**
	描画
**//*---------------------------------------------------------------------*/
void SgManager::render(const RenderCtx* rc)
{
	if(_nodeRoot != 0L)
	{
		_nodeRoot->render(rc);
	}
}

////////////////////////////////////////////////////////////////////////////

TFW_END_NS